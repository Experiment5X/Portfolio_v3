head
  link(href='https://fonts.googleapis.com/css?family=Comfortaa&display=swap' rel='stylesheet')
  link(href='https://fonts.googleapis.com/css?family=Quicksand&display=swap' rel='stylesheet')
  link(href='https://fonts.googleapis.com/css?family=Nanum+Gothic&display=swap' rel='stylesheet')
  link(href="https://fonts.googleapis.com/css?family=Ubuntu+Mono&display=swap" rel="stylesheet")
  link(rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.12.1/css/all.min.css' integrity='sha256-mmgLkCYLUQbXn0B1SRqzHar6dCnv9oZFPEC1g1cwlkk=' crossorigin='anonymous')
  link(rel='stylesheet' href='style/style.css')
  script(src="https://cdnjs.cloudflare.com/ajax/libs/d3/5.15.0/d3.js" integrity="sha256-BANs9QteeZKuqwQcdddFZlWLLyUCIke5Nn80f8B5G3g=" crossorigin="anonymous")
  script(src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js' integrity='sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=' crossorigin='anonymous')
  script(src='./script/script.js' type='text/javascript')
  script(src='./script/icon-bubble-chart.js' type='text/javascript')
  // https://icons8.com/icon/38273/css3

  meta(name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1")
//.debug(style="position: fixed; left: 50vw; height: 100vh; background-color: rgba(255, 0, 0, 0.5); width: 50vw; z-index: 100; ")
.hero-header
  .hero-header-pattern
  .profile-pic-small-container
    img.profile-pic-small(src='images/me-square.jpg')
  .hero-content
    .hero-content-body
      h1.hero-name Adam Spindler
      h2.hero-title Software Enthusiast
      hr.hero-separator
      .hero-index
        .hero-index-item
          .hero-index-item-link(x-link-for='#work')
            i.hero-index-item-bullet.fas.fa-dot-circle
            | Work
        .hero-index-item
          .hero-index-item-link(x-link-for='#school')
            i.hero-index-item-bullet.fas.fa-dot-circle
            | School
        .hero-index-item
          .hero-index-item-link(x-link-for='#projects')
            i.hero-index-item-bullet.fas.fa-dot-circle
            | Projects
    .hero-header-base-left
    .hero-header-base-right
  .image-separator
  img.profile-pic(src='images/me.jpg')
.content-container
  .hero-header-base-full
  .content-header-container
    .content-header
      p
        | I have been programming since 8th grade and have worked on a variety of different projects. I've trained deep learning models, reverse engineered kernel file systems, and implemented network protocols. I've done frontend and backend web development, built cross-platform desktop applications, and created iOS apps. I'm interested in learning new programming languages and staying up to date on the latest tools.
      .icon-bubble
  section#work.content-section
    .content-section-title-container
      .content-section-title-pattern
      .content-section-title Work
    section.content-section-body
      section.experience-block
        .experience-block-title Tesla
        .experience-block-paragraph
          | I worked directly with product managers to create internal front-end applications using React, Typescript, and GraphQL. I gained experience using libraries including as React-Table, Mapbox, styled-components, and recharts. My day-to-day consists of developing new features, fixing bugs discovered by users, and reviewing other developers' code. In addition to front-end development, I've also contributed to mathematical simulation software written Python.
        section.experience-badge-container
          .experience-badge(x-badge-content='React')
            img.experience-badge-icon(src='./images/tech-icons/react.svg')
          .experience-badge(x-badge-content='Typescript')
            img.experience-badge-icon(src='./images/tech-icons/typescript.svg')
          .experience-badge(x-badge-content='GraphQL')
            img.experience-badge-icon(src='./images/tech-icons/graphql.svg')
          .experience-badge(x-badge-content='HTML 5')
            img.experience-badge-icon(src='./images/tech-icons/html5.svg')
          .experience-badge(x-badge-content='CSS 3')
            img.experience-badge-icon(src='./images/tech-icons/css3.svg')
          .experience-badge(x-badge-content='git')
            img.experience-badge-icon(src='./images/tech-icons/git.svg')
      section.experience-block
        .experience-block-title Datto
        .experience-block-paragraph
          | I worked on a distributed system for backing up petabytes of data consisting of a Scala, PHP, and Ruby backend with an AngularJS frontend. I developed features for a processing pipeline and fixed critical issues affecting customer backups. I extended an internal library to fetch additional information from Microsoft's O365 API, investigated a job management library which uses Redis, and was trained on Scala and Symfony. During my time there I also participated in a hackathon in which my team developed a Raspberry Pi device to detect when snack bins become empty. For this project I wrote a web application to serve the front-end and also developed code to detect QR codes at the bottom of the snack bins.
          p
          section.experience-badge-container
            .experience-badge(x-badge-content='PHP')
              img.experience-badge-icon(src='./images/tech-icons/php.svg')
            .experience-badge(x-badge-content='Ruby')
              img.experience-badge-icon(src='./images/tech-icons/ruby.svg')
            .experience-badge(x-badge-content='Scala')
              img.experience-badge-icon(src='./images/tech-icons/scala.svg')
            .experience-badge(x-badge-content='Docker')
              img.experience-badge-icon(src='./images/tech-icons/docker.png')
            .experience-badge(x-badge-content='git')
              img.experience-badge-icon(src='./images/tech-icons/git.svg')
      section.experience-block
        .experience-block-title EagleView
        .experience-block-paragraph
          | I worked with a scrum team doing full stack web development for both customer facing applications and internal micro-services. I worked with Postgres databases, a PHP backend, a JS frontend, and HTML/CSS. Most of the projects I worked on were SPAs and written using ExtJS. We also had internal applications that I developed features for that had basic front-ends built using Bootstrap and Mustache. For example, I created a log file viewer webpage that handled arbitrarily sized files, I integrated Amazon secret manager into existing applications, and I wrote SQL queries to create test data. I also started a micro-service in Go for my team along with Jenkins jobs to test it and deploy it to kubernetes.
        section.experience-badge-container
          .experience-badge(x-badge-content='Postgres')
            img.experience-badge-icon(src='./images/tech-icons/postgres.svg')
          .experience-badge(x-badge-content='PHP')
            img.experience-badge-icon(src='./images/tech-icons/php.svg')
          .experience-badge(x-badge-content='JavaScript')
            img.experience-badge-icon(src='./images/tech-icons/javascript.svg')
          .experience-badge(x-badge-content='ExtJS')
            img.experience-badge-icon(src='./images/tech-icons/extjs.png')
          .experience-badge(x-badge-content='HTML 5')
            img.experience-badge-icon(src='./images/tech-icons/html5.svg')
          .experience-badge(x-badge-content='CSS 3')
            img.experience-badge-icon(src='./images/tech-icons/css3.svg')
          .experience-badge(x-badge-content='Docker')
            img.experience-badge-icon(src='./images/tech-icons/docker.png')
          .experience-badge(x-badge-content='git')
            img.experience-badge-icon(src='./images/tech-icons/git.svg')
      section.experience-block
        .experience-block-title Rochester Software Associates
        .experience-block-paragraph
          | I developed an algorithm to remove hole punch marks from scanned documents using a deep learning model that I trained myself. I gathered the training data myself by scanning several pieces of paper with a bunch of holes in them and labelling them by hand. I also implemented printer network protocols in C# after using Wireshark for analysis and integrated this into existing software. Most of the protocols were very custom to each printer, but I also implemented IPP which is a widely used standard that I learned by reading the RFCs. I worked heavily with SNMP to query printers for job information and supply levels. 
        section.experience-badge-container
          .experience-badge(x-badge-content='C#')
            img.experience-badge-icon(src='./images/tech-icons/csharp.svg')
          .experience-badge(x-badge-content='Wireshark')
            img.experience-badge-icon(src='./images/tech-icons/wireshark.png')
          .experience-badge(x-badge-content='Keras')
            img.experience-badge-icon(src='./images/tech-icons/keras.jpg')
          .experience-badge(x-badge-content='git')
            img.experience-badge-icon(src='./images/tech-icons/git.svg')
  section#school.content-section
    .content-section-title-container
      .content-section-title-pattern
      .content-section-title School
    .content-section-body
      .education-header
        img.rit-logo(src='images/RIT.svg')
        .education-degrees
          .education-degree
            .education-degree-name Masters in Computer Science
            .education-gpa 4.0 GPA
          .education-degree
            .education-degree-name Bachelors in Software Engineering
            .education-gpa 3.61 GPA
          .education-degree-minor Minor in Computer Security
      section.experience-block
        .experience-block-title Parallel Systems
        .experience-block-paragraph
          | I wrote a distributed bitcoin miner in C using CUDA and OpenMPI which I deployed to my school's compute cluster. I also wrote distributed applications in Java using UDP sockets to manage the job coordination myself and tested it using docker-compose. Other projects included a CUDA RSA cracker, a Spark app to perform statistical analysis, and a Java app to prove Lemoine's conjecture.
        section.experience-badge-container
          .experience-badge(x-badge-content='C')
            img.experience-badge-icon(src='./images/tech-icons/c.svg')
          .experience-badge(x-badge-content='Java')
            img.experience-badge-icon(src='./images/tech-icons/java.svg')
          .experience-badge(x-badge-content='CUDA')
            img.experience-badge-icon(src='./images/tech-icons/nvidia.svg')
          .experience-badge(x-badge-content='Spark')
            img.experience-badge-icon(src='./images/tech-icons/spark.svg')
          .experience-badge(x-badge-content='OpenMPI')
            img.experience-badge-icon(src='./images/tech-icons/openmpi.png')
      section.experience-block
        .experience-block-title Deep Learning
        .experience-block-paragraph
          | I wrote a neural network from scratch, including the derivation of backpropagation using calculus. I also used higher level libraries like Keras to develop image classifiers, and create adversarial examples. Another project was based around solving a maze using an MDP for an introduction to reinforcement learning. I read several papers for this class which were SOTA at the time including YOLO9000, FocalLoss, and papers on semantic segmentation.
        section.experience-badge-container
          .experience-badge(x-badge-content='Keras')
            img.experience-badge-icon(src='./images/tech-icons/keras.jpg')
          .experience-badge(x-badge-content='Python')
            img.experience-badge-icon(src='./images/tech-icons/python.svg')
      section.experience-block
        .experience-block-title Networks
        .experience-block-paragraph
          | I implemented a dockerized RIPv2 router along with a TCP-like protocol that could handle a channel with no delivery guarantees. I also developed a packet analyzer. In this class I learned about standard protocols like Ethernet, IPv4/IPv6, TCP/UDP/ICMP, as well as modern protocols like BitTorrent, TOR, and Zigbee.
        section.experience-badge-container
          .experience-badge(x-badge-content='Java')
            img.experience-badge-icon(src='./images/tech-icons/java.svg')
      section.experience-block
        .experience-block-title Web Security
        .experience-block-paragraph
          | I created a dockerized Twitter clone with built-in security against XSS, CSRF, click-jacking, user-enumeration, rainbow tables, and session token prediction. I wrote this application using a microservice architecture with a variety of different languages for each of the services. For storing the tweets I used ElasticSearch and used MySQL for storing users, sessions, and CSRF tokens.
        section.experience-badge-container
          .experience-badge(x-badge-content='Java')
            img.experience-badge-icon(src='./images/tech-icons/java.svg')
          .experience-badge(x-badge-content='Ruby')
            img.experience-badge-icon(src='./images/tech-icons/ruby.svg')
          .experience-badge(x-badge-content='Python')
            img.experience-badge-icon(src='./images/tech-icons/python.svg')
          .experience-badge(x-badge-content='HTML 5')
            img.experience-badge-icon(src='./images/tech-icons/html5.svg')
          .experience-badge(x-badge-content='CSS 3')
            img.experience-badge-icon(src='./images/tech-icons/css3.svg')
          .experience-badge(x-badge-content='Docker')
            img.experience-badge-icon(src='./images/tech-icons/docker.png')
      section.experience-block
        .experience-block-title Embedded Systems
        .experience-block-paragraph
          | I created a game on the STM32 board using the gyroscope and two servo motors. The goal of the game is for the user to match the position of the computer controlled servo motor by tilting the STM32 board to move their own servo into position. For this project I used threads in the FreeRTOS operating system, consulted the manuals for interfacing with the gyroscope, and used UART to display scoring information on a terminal.
        section.experience-badge-container
          .experience-badge(x-badge-content='FreeRTOS')
            img.experience-badge-icon(src='./images/tech-icons/free_rtos.jpeg')
          .experience-badge(x-badge-content='C')
            img.experience-badge-icon(src='./images/tech-icons/c.svg')
          .experience-badge(x-badge-content='Servo Motors')
            img.experience-badge-icon(src='./images/tech-icons/servo.svg')
      section.experience-block
        .experience-block-title Big Data
        .experience-block-paragraph
          | I worked on a group project in which I loaded 60 million records into a Postgres database, created queries on the data, and optimized the queries using indexes. For a homework, I loaded millions of records into a MongoDB instance and optimized queries on that system using indexes as well. I also performed frequent itemset mining, designed schemas, and implemented clustering algorithms.
        section.experience-badge-container
          .experience-badge(x-badge-content='Postgres')
            img.experience-badge-icon(src='./images/tech-icons/postgres.svg')
          .experience-badge(x-badge-content='Mongo DB')
            img.experience-badge-icon(src='./images/tech-icons/mongodb.svg')
          .experience-badge(x-badge-content='Python')
            img.experience-badge-icon(src='./images/tech-icons/python.svg')
          .experience-badge(x-badge-content='Javascript')
            img.experience-badge-icon(src='./images/tech-icons/javascript.svg')
          .experience-badge(x-badge-content='Docker')
            img.experience-badge-icon(src='./images/tech-icons/docker.png')
  section#projects.content-section
    .content-section-title-container
      .content-section-title-pattern
      .content-section-title Projects
    .content-section-body
      section.experience-block
        .experience-project-block-title
          .experience-block-title GSC Interpreter
          a(href='https://github.com/Experiment5X/GscInterpreter') View on GitHub
        .experience-block-paragraph
          | I wrote an interpreter for the game scripting language used in Call of Duty. My tool will act as a syntax checker, with the ability to easily run it on a directory of scripts. It also has the ability to fully interpret a subset of the language. It has support for functions, conditionals, loops, lists, and objects. My interpreter can successfully run mergesort implemented in GSC.
        section.experience-badge-container
          .experience-badge(x-badge-content='Haskell')
            img.experience-badge-icon(src='./images/tech-icons/haskell.svg')
      section.experience-block
        .experience-project-block-title
          .experience-block-title Garbage Full Detector
          a(href='https://github.com/Experiment5X/GarbageFullDetector') View on GitHub
        .experience-block-paragraph
          | I built a Raspberry Pi device to detect when my garbage is full by using a deep learning model to classify a picture that the device takes. If someone fills up the garbage without taking it out, the device will send a GIF of them filling it to everyone on a contact list. I gathered training data for this project myself, by taking hundreds of pictures of my garbage can in different conditions. I used Keras for the model, I created a basic web app in NodeJS to configure the device, and used AWS SNS to send people texts to notify them when they're full. 
        section.experience-badge-container
          .experience-badge(x-badge-content='JavaScript')
            img.experience-badge-icon(src='./images/tech-icons/javascript.svg')
          .experience-badge(x-badge-content='Python')
            img.experience-badge-icon(src='./images/tech-icons/python.svg')
          .experience-badge(x-badge-content='Keras')
            img.experience-badge-icon(src='./images/tech-icons/keras.jpg')
          .experience-badge(x-badge-content='HTML 5')
            img.experience-badge-icon(src='./images/tech-icons/html5.svg')
          .experience-badge(x-badge-content='CSS 3')
            img.experience-badge-icon(src='./images/tech-icons/css3.svg')
          .experience-badge(x-badge-content='AWS')
            img.experience-badge-icon(src='./images/tech-icons/aws.svg')
          .experience-badge(x-badge-content='Raspberry Pi')
            img.experience-badge-icon(src='./images/tech-icons/raspi.svg')
      section.experience-block
        .experience-project-block-title
          .experience-block-title Feature Map Viewer
          a(href='https://github.com/Experiment5X/DeepFeatureVisualizationWebApp') View on GitHub
        .experience-block-paragraph
          | I created this application to visualize feature maps in VGG-16. The application allows you to upload an image and select a layer in VGG-16 to investigate. To visualize the feature map, I start off with an image of noise and perform backpropagation on the input image, continuously updating it until its feature map at the selected layer best matches the feature map of the input image. The user has control over several parameters used to re-create the visualization such as learning rate, gradient std clip, and a total variation coefficient.
        section.experience-badge-container
          .experience-badge(x-badge-content='Python')
            img.experience-badge-icon(src='./images/tech-icons/python.svg')
          .experience-badge(x-badge-content='Keras')
            img.experience-badge-icon(src='./images/tech-icons/keras.jpg')
          .experience-badge(x-badge-content='HTML 5')
            img.experience-badge-icon(src='./images/tech-icons/html5.svg')
          .experience-badge(x-badge-content='CSS 3')
            img.experience-badge-icon(src='./images/tech-icons/css3.svg')
          .experience-badge(x-badge-content='Django')
            img.experience-badge-icon(src='./images/tech-icons/django.svg')
      section.experience-block
        .experience-project-block-title
          .experience-block-title Velocity
          a(href='https://github.com/hetelek/Velocity') View on GitHub
        .experience-block-paragraph
          | I wrote an application with my friend to implement several of the propriety file systems Microsoft uses on the Xbox 360. The file system STFS has security on it to prevent modification, however we were able to bypass these measures to allow modification. To understand how these file systems worked we reverse engineered the Xbox 360's kernel bytecode. This is a cross-platform desktop application which allows users to plug in their proprietary hardrives, view all the content on it, and easily modify their profiles which are buried in layers of Microsoft's proprietary file formats.
        section.experience-badge-container
          .experience-badge(x-badge-content='C++')
            img.experience-badge-icon(src='./images/tech-icons/cpp.svg')
          .experience-badge(x-badge-content='Qt')
            img.experience-badge-icon(src='./images/tech-icons/qt.svg')
          .experience-badge(x-badge-content='PowerPC')
            img.experience-badge-icon(src='./images/tech-icons/powerpc.svg')
footer
  .footer-content
    .footer-content-item.contact
      .contact-title Contact
      .contact-item
        .contact-item-title Email
        .contact-item-value axs9701@rit.edu
      .contact-item
        .contact-item-title Location
        .contact-item-value Fremont, California
    .footer-content-item.contact
      .contact-title Site Information
      | This site was written completely by me from scratch using only jQuery, D3 and external fonts. The source is available on GitHub.
